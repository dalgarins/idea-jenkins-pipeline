# suppress inspection "UnusedProperty" for whole file
env.doc = Environment variables
pipeline.doc = The <code>agent</code> section specifies where the entire Pipeline, or a specific stage, \
  will execute in the Jenkins environment depending on where the agent section is placed. \
  The section must be defined at the top-level inside the <code>pipeline</code> block, but stage-level usage is optional.

agent.doc = The <code>agent</code> section specifies where the entire Pipeline, or a specific stage, \
  will execute in the Jenkins environment depending on where the <code>agent</code> section is placed. \
  The section must be defined at the top-level inside the <code>pipeline</code> block, but stage-level usage is optional.
agent.any.doc = Execute the Pipeline, or stage, on any available agent.<p>For example: <code>agent any</code>
agent.none.doc = When applied at the top-level of the <code>pipeline</code> block \
  no global agent will be allocated for the entire Pipeline run and each <code>stage</code> \
  section will need to contain its own <code>agent</code> section.<p>For example: <code>agent none<code>
agent.label.doc = Execute the Pipeline, or stage, on an agent available in the Jenkins environment with the provided label. \
  For example: <code>agent { label 'my-defined-label' }</code>
agent.node.doc = <code>agent { node { label 'labelName' } }</code> behaves the same as <code>agent { label 'labelName' }</code>, \
  but node allows for additional options (such as <code>customWorkspace</code>).
agent.node.customWorkspace.doc = A string. Run the Pipeline or individual stage this agent is applied to within \
  this custom workspace, rather than the default.<p>\
  It can be either a relative path, in which case the custom workspace will be under the workspace root on the node, \
  or an absolute path.

tools.doc = A section defining tools to auto-install and put on the <code>PATH</code>. \
  This is ignored if <code>agent none</code> is specified.
tools.jdk.doc = The JDK distribution to use for this <code>pipeline</code> or <code>stage</code>.
tools.maven.doc = The Maven distribution to use for this <code>pipeline</code> or <code>stage</code>.
tools.gradle.doc = The Gradle distribution to use for this <code>pipeline</code> or <code>stage</code>.

options.doc = The <code>options</code> directive allows configuring Pipeline-specific options from within the Pipeline itself. \
  Pipeline provides a number of these options, such as <code>buildDiscarder</code>, but they may also be provided by plugins, \
  such as <code>timestamps</code>.

environment.doc = The <code>environment</code> directive specifies a sequence of key-value pairs which will be defined \
  as environment variables for all steps, or stage-specific steps, depending on where the <code>environment</code> directive \
  is located within the Pipeline.<p>\
  This directive supports a special helper method <code>credentials()</code> which can be used to access pre-defined \
  Credentials by their identifier in the Jenkins environment.

stages.doc = Contains a list of stages

post.doc = The <code>post</code> section defines one or more additional steps that are run upon the completion \
  of a Pipeline's or stage's run (depending on the location of the post section within the Pipeline). \
  <code>post</code> can support, and executes in this exact order, any of the following post-condition blocks: \
  <code>always</code>, <code>changed</code>, <code>fixed</code>, <code>regression</code>, <code>aborted</code>, \
  <code>failure</code>, <code>success</code>, <code>unstable</code>, <code>unsuccessful</code>, and <code>cleanup</code>.<p>\
  These condition blocks allow the execution of steps inside each condition depending on the completion status \
  of the Pipeline or stage.

post.always.doc = Run the steps in the <code>post</code> section regardless of the completion status of the Pipeline's or stage's run.
post.changed.doc = Only run the steps in <code>post</code> if the current Pipeline's run has a different completion status from its previous run.
post.fixed.doc = Only run the steps in <code>post</code> if the current Pipeline's run is successful and the previous run failed or was unstable.
post.regression.doc = Only run the steps in <code>post</code> if the current Pipeline's or status is failure, unstable, or aborted and the previous run was successful.
post.aborted.doc = Only run the steps in <code>post</code> if the current Pipeline's run has an "aborted" status, usually due to the Pipeline being manually aborted. This is typically denoted by gray in the web UI.
post.failure.doc = Only run the steps in <code>post</code> if the current Pipeline's or stage's run has a "failed" status, typically denoted by red in the web UI.
post.success.doc = Only run the steps in <code>post</code> if the current Pipeline' or stage's run has a "success" status, typically denoted by blue or green in the web UI.
post.unstable.doc = Only run the steps in <code>post</code> if the current Pipeline's run has an "unstable" status, usually caused by test failures, code violations, etc. This is typically denoted by yellow in the web UI.
post.unsuccessful.doc = Only run the steps in <code>post</code> if the current Pipeline's or stage's run has not a "success" status. This is typically denoted in the web UI depending on the status previously mentioned (for stages this may fire if the build itself is unstable).
post.cleanup.doc = Run the steps in this <code>post</code> condition after every other post condition has been evaluated, regardless of the Pipeline or stage's status.
