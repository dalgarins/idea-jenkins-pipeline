package standardDsls

// https://www.jenkins.io/doc/book/pipeline/syntax/
final rootContext = context(pathRegexp: /.*\/Jenkinsfile|.*\/.*\.groovy/)

contributor([rootContext]) {
  method(name: 'getEnv', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl', doc: 'jpgdsl@jpgdsl:env')
  method(name: 'getCurrentBuild', type: 'org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper', doc: 'jpgdsl@jpgdsl:currentBuild')

  // Parent Pipeline closure
  if (isTopLevel()) {
    method(name: 'pipeline', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:pipeline')
  }

  if (isInsideMethod()) {
    method(name: 'timestamp', type: void, params: [body: Closure], doc: 'Timestamps')
    method(name: 'bat', type: Object, params: [script: String], doc: 'Windows Batch Script')
    method(name: 'bat', type: Object, namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: Boolean), parameter(name: 'returnStdout', type: Boolean)], doc: 'Windows Batch Script')
    method(name: 'checkout', type: Object, params: [scm: Map], doc: 'General SCM')
    method(name: 'checkout', type: Object, namedParams: [parameter(name: 'scm', type: Map), parameter(name: 'changelog', type: Boolean), parameter(name: 'poll', type: Boolean)], doc: 'General SCM')
    method(name: 'cleanWs', type: 'void', doc: 'Clean workspace')
    method(name: 'deleteDir', type: void, params: [:], doc: 'Recursively delete the current directory from the workspace')
    method(name: 'dir', type: void, params: [path: String, body: Closure], doc: 'Change current directory')
    method(name: 'fileExists', type: Object, params: [file: String], doc: 'Verify if file exists in workspace')
    method(name: 'git', type: Object, params: [url: String], doc: 'Git')
    method(name: 'git', type: Object, namedParams: [parameter(name: 'url', type: String), parameter(name: 'branch', type: String), parameter(name: 'changelog', type: Boolean), parameter(name: 'credentialsId', type: String), parameter(name: 'poll', type: Boolean)], doc: 'Git')
    method(name: 'junit', type: Object, params: [testResults: String], doc: 'Archive JUnit-formatted test results')
    method(name: 'junit', type: Object, namedParams: [parameter(name: 'testResults', type: String), parameter(name: 'allowEmptyResults', type: Boolean), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: Boolean), parameter(name: 'testDataPublishers', type: Map)], doc: 'Archive JUnit-formatted test results')
    method(name: 'load', type: Object, params: [path: String], doc: 'Evaluate a Groovy source file into the Pipeline script')
    method(name: 'powershell', type: Object, params: [script: String], doc: 'PowerShell Script')
    method(name: 'powershell', type: Object, namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: Boolean), parameter(name: 'returnStdout', type: Boolean)], doc: 'PowerShell Script')
    method(name: 'publishHTML', type: Object, params: [target: Map], doc: 'Publish HTML reports')
    method(name: 'pwd', type: Object, params: [:], doc: 'Determine current directory')
    method(name: 'pwd', type: Object, namedParams: [parameter(name: 'tmp', type: Boolean)], doc: 'Determine current directory')
    method(name: 'readFile', type: Object, params: [file: String], doc: 'Read file from workspace')
    method(name: 'readFile', type: Object, namedParams: [parameter(name: 'file', type: String), parameter(name: 'encoding', type: String)], doc: 'Read file from workspace')
    method(name: 'sh', type: Object, params: [script: String], doc: 'Shell Script')
    method(name: 'sh', type: Object, namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: Boolean), parameter(name: 'returnStdout', type: Boolean)], doc: 'Shell Script')
    method(name: 'stash', type: Object, params: [name: String], doc: 'Stash some files to be used later in the build')
    method(name: 'stash', type: Object, namedParams: [parameter(name: 'name', type: String), parameter(name: 'allowEmpty', type: Boolean), parameter(name: 'excludes', type: String), parameter(name: 'includes', type: String), parameter(name: 'useDefaultExcludes', type: Boolean)], doc: 'Stash some files to be used later in the build')
    method(name: 'tm', type: Object, params: [stringWithMacro: String], doc: 'Expand a string containing macros')
    method(name: 'unstash', type: Object, params: [name: String], doc: 'Restore files previously stashed')
    method(name: 'validateDeclarativePipeline', type: Object, params: [path: String], doc: 'Validate a file containing a Declarative Pipeline')
    method(name: 'wrap', type: Object, params: [delegate: Map, body: Closure], doc: 'General Build Wrapper')
    method(name: 'writeFile', type: Object, namedParams: [parameter(name: 'file', type: String), parameter(name: 'text', type: String), parameter(name: 'encoding', type: String)], doc: 'Write file to workspace')
    method(name: 'archive', type: Object, params: [includes: String], doc: 'Advanced/Deprecated Archive artifacts')
    method(name: 'archive', type: Object, namedParams: [parameter(name: 'includes', type: String), parameter(name: 'excludes', type: String)], doc: 'Archive artifacts')
    method(name: 'dockerFingerprintFrom', type: Object, namedParams: [parameter(name: 'dockerfile', type: String), parameter(name: 'image', type: String), parameter(name: 'buildArgs', type: Map), parameter(name: 'toolName', type: String)], doc: 'Record trace of a Docker image used in FROM')
    method(name: 'unarchive', type: Object, params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
    method(name: 'unarchive', type: Object, namedParams: [parameter(name: 'mapping', type: Map)], doc: 'Copy archived artifacts into the workspace')
    method(name: 'withDockerContainer', type: Object, params: [image: String, body: Closure], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
    method(name: 'withDockerContainer', type: Object, params: [body: Closure], namedParams: [parameter(name: 'image', type: String), parameter(name: 'args', type: String), parameter(name: 'toolName', type: String)], doc: 'Run build steps inside a Docker container')
    method(name: 'withDockerRegistry', type: Object, params: [registry: Map, body: Closure], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
    method(name: 'withDockerServer', type: Object, params: [server: Map, body: Closure], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    method(name: 'aliyunOSSUpload', type: Object, doc: 'Upload files or directories to aliyun OSS', namedParams: [parameter(name: 'endpoint', type: String), parameter(name: 'accessKeyId', type: String), parameter(name: 'accessKeySecret', type: String), parameter(name: 'bucketName', type: String), parameter(name: 'localPath', type: String), parameter(name: 'remotePath', type: String), parameter(name: 'maxRetries', type: String)])
    method(name: 'archiveArtifacts', type: Object, namedParams: [parameter(name: 'artifacts', type: String, doc: 'Use comma separator to set a list of patterns'), parameter(name: 'excludes', type: String, doc: 'Use comma separator to set a list of patterns'), parameter(name: 'allowEmptyArchive', type: Boolean), parameter(name: 'caseSensitive', type: Boolean), parameter(name: 'defaultExcludes', type: Boolean), parameter(name: 'fingerprint', type: Boolean), parameter(name: 'followSymlinks', type: Boolean), parameter(name: 'onlyIfSuccessful', type: Boolean)])
    method(name: 'buildName', type: Object, params: [buildName: String], doc: 'Build name')
    method(name: 'buildDescription', type: Object, params: [buildDescription: String], doc: 'Build description')
    method(name: 'publishIssues', type: Object, params: [issues: List], doc: 'Publish issues created by a static analysis scan')
    method(name: 'publishIssues', type: Object, namedParams: [parameter(name: 'issues', type: 'java.util.List'), parameter(name: 'failOnError', type: 'boolean')])
    method(name: 'scanForIssues', type: 'Object', params: [:], doc: 'Scan files or the console log for warnings or issues')
    method(name: 'scanForIssues', type: 'Object', namedParams: [parameter(name: 'blameDisabled', type: 'boolean'), parameter(name: 'filters', type: 'java.util.List')])
  }
}

final currentBuild = context(ctype: 'org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper')

contributor([currentBuild]) {
  method(name: 'getNumber', type: int, doc: 'jpgdsl@jpgdsl:currentBuild.number')
  method(name: 'getResult', type: String, doc: 'jpgdsl@jpgdsl:currentBuild.result')
  method(name: 'getCurrentResult', type: String, doc: 'jpgdsl@jpgdsl:currentBuild.currentResult')
  method(name: 'getDisplayName', type: String, doc: 'normally #123 but sometimes set to, e.g., an SCM commit identifier')
  method(name: 'getFullDisplayName', type: String, doc: 'normally #123 but sometimes set to, e.g., an SCM commit identifier')
  method(name: 'getProjectName', type: String, doc: 'normally #123 but sometimes set to, e.g., an SCM commit identifier')
  method(name: 'getFullProjectName', type: String, doc: 'normally #123 but sometimes set to, e.g., an SCM commit identifier')
  method(name: 'getDescription', type: String, doc: 'additional information about the build')
  method(name: 'getId', type: String, doc: 'normally number as a string')
  method(name: 'getTimeInMillis', type: long, doc: 'time since the epoch when the build was scheduled')
  method(name: 'getStartTimeInMillis', type: long, doc: 'time since the epoch when the build started running')
  method(name: 'getDuration', type: long, doc: 'duration of the build in milliseconds')
  method(name: 'getDurationString', type: String, doc: 'a human-readable representation of the build duration')
  method(name: 'getPreviousBuild', type: 'org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper', doc: 'another similar object, or null')
  method(name: 'getNextBuild', type: 'org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper', doc: 'another similar object, or null')
  method(name: 'getAbsoluteUrl', type: String, doc: 'URL of build index page')
  method(name: 'getBuildVariables', type: Map, doc: 'for a non-Pipeline downstream build, offers access to a map of defined build variables; for a Pipeline downstream build, any variables set globally on env')
  method(name: 'getChangeSets', type: String, doc: 'a list of changesets coming from distinct SCM checkouts; each has a kind and is a list of commits; each commit has a commitId, timestamp, msg, author, and affectedFiles each of which has an editType and path; the value will not generally be Serializable so you may only access it inside a method marked @NonCPS')
  method(name: 'getRawBuild', type: String, doc: 'a hudson.model.Run with further APIs, only for trusted libraries or administrator-approved scripts outside the sandbox; the value will not be Serializable so you may only access it inside a method marked @NonCPS')
  method(name: 'resultIsBetterOrEqualTo', type: boolean, params: [buildStatus: 'String'], doc: 'Compares the current build result to the provided result string (SUCCESS, UNSTABLE, or FAILURE) and returns true if the current build result is better than or equal to the provided result.')
  method(name: 'resultIsWorseOrEqualTo', type: boolean, params: [buildStatus: 'String'], doc: 'Compares the current build result to the provided result string (SUCCESS, UNSTABLE, or FAILURE) and returns true if the current build result is worse than or equal to the provided result.')
}

final closures = context(scope: closureScope(null))

contributor([closures]) {
  if (isEnclosedBy(['pipeline', 'stage', 'matrix'])) {
    method(name: 'agent', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:agent')
    method(name: 'agent', type: void, params: [type: Object], doc: 'jpgdsl@jpgdsl:agent')
    method(name: 'tools', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:tools')
    method(name: 'options', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:options')
    method(name: 'environment', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:environment')
    method(name: 'stages', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:stages')
    method(name: 'post', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post')
  }

  if (isEnclosedBy(['pipeline', 'input'])) {
    method(name: 'parameters', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:parameters')
  }

  // Things that can be inside a pipeline
  if (isEnclosedBy(['pipeline'])) {
    method(name: 'triggers', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:triggers')
    method(name: 'ansiColor', type: Object, params: [colorMapName: String], doc: 'Color ANSI Console Output')
    method(name: 'jiraComment', type: Object, namedParams: [parameter(name: 'issueKey', type: String), parameter(name: 'body', type: String)], doc: 'JIRA: Add a comment to issue(s)')
    method(name: 'jiraIssueSelector', type: Object, params: [:], doc: 'JIRA: Issue selector')
    method(name: 'jiraIssueSelector', type: Object, namedParams: [parameter(name: 'issueSelector', type: Map)], doc: 'JIRA: Issue selector')
    method(name: 'jiraSearch', type: Object, params: [jql: String], doc: 'JIRA: Search issues')
    method(name: 'build', type: Object, params: [job: String], doc: 'Build a job')
    method(name: 'build', type: Object, namedParams: [parameter(name: 'job', type: String), parameter(name: 'parameters', type: List), parameter(name: 'propagate', type: Boolean), parameter(name: 'quietPeriod', type: Integer), parameter(name: 'wait', type: Boolean)], doc: 'Build a job')
    method(name: 'ec2', type: Object, namedParams: [parameter(name: 'cloud', type: String), parameter(name: 'template', type: String)], doc: 'Cloud template provisioning')
    method(name: 'error', type: Object, params: [message: String], doc: 'Error signal')
    method(name: 'isUnix', type: Object, params: [:], doc: 'Checks if running on a Unix-like node')
    method(name: 'library', type: Object, params: [identifier: String], doc: 'Load a shared library on the fly')
    method(name: 'library', type: Object, namedParams: [parameter(name: 'identifier', type: String), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: Map)], doc: 'Load a shared library on the fly')
    method(name: 'libraryResource', type: Object, params: [resource: String], doc: 'Load a resource file from a shared library')
    method(name: 'mail', type: Object, namedParams: [parameter(name: 'subject', type: String), parameter(name: 'body', type: String), parameter(name: 'bcc', type: String), parameter(name: 'cc', type: String), parameter(name: 'charset', type: String), parameter(name: 'from', type: String), parameter(name: 'mimeType', type: String), parameter(name: 'replyTo', type: String), parameter(name: 'to', type: String)], doc: 'Mail')
    method(name: 'milestone', type: Object, params: [ordinal: Integer], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'milestone', type: Object, namedParams: [parameter(name: 'ordinal', type: Integer), parameter(name: 'label', type: String)], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'node', type: Object, params: [body: Closure], doc: 'Allocate node')
    method(name: 'node', type: Object, params: [label: String, body: Closure], doc: 'Allocate node')
    method(name: 'properties', type: Object, params: [properties: Map], doc: 'Set job properties')
    method(name: 'readTrusted', type: Object, params: [path: String], doc: 'Read trusted file from SCM')
    method(name: 'resolveScm', type: Object, namedParams: [parameter(name: 'source', type: Map), parameter(name: 'targets', type: Map), parameter(name: 'ignoreErrors', type: Boolean)], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
    method(name: 'retry', type: Object, params: [count: Integer, body: Closure], doc: 'Retry the body up to N times')
    method(name: 'sleep', type: Object, params: [time: Integer], doc: 'Sleep')
    method(name: 'sleep', type: Object, namedParams: [parameter(name: 'time', type: Integer), parameter(name: 'unit', type: String, doc: 'java.util.concurrent.TimeUnit, Can be SECONDS, MINUTES, HOURS, DAYS')], doc: 'Sleep')
    method(name: 'timeout', type: Object, params: [time: Integer, body: Closure], doc: 'Enforce time limit')
    method(name: 'timeout', type: Object, params: [body: Closure], namedParams: [parameter(name: 'time', type: Integer), parameter(name: 'unit', type: String, doc: 'java.util.concurrent.TimeUnit, Can be SECONDS, MINUTES, HOURS, DAYS')], doc: 'Enforce time limit')
    method(name: 'tool', type: Object, params: [body: Closure], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'waitUntil', type: Object, params: [body: Closure], doc: 'Wait for condition')
    method(name: 'waitUntil', type: Map, namedParams: [parameter(name: 'initialRecurrencePeriod', type: Integer), parameter(name: 'quiet', type: Boolean)], params: [body: Closure], doc: 'Wait for condition')
    method(name: 'withCredentials', type: Object, params: [bindings: Map, body: Closure], doc: 'Bind credentials to variables')
    method(name: 'withCredentials', type: Object, params: [bindings: List, body: Closure], doc: 'Bind credentials to variables')
    method(name: 'withCredentials', type: Object, params: [file: Closure, string: Closure], doc: 'Bind credentials to variables')
    method(name: 'withEnv', type: Object, params: [overrides: Map, body: Closure], doc: 'Set environment variables')
    method(name: 'wrap', type: Object)
    method(name: 'ws', type: Object, params: [dir: String, body: Closure], doc: 'Allocate workspace')
    method(name: 'catchError', type: Object, params: [body: Closure], doc: 'Advanced/Deprecated Catch error and set build result')
    method(name: 'dockerFingerprintRun', type: Object, params: [containerId: String], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
    method(name: 'dockerFingerprintRun', type: Object, namedParams: [parameter(name: 'containerId', type: String), parameter(name: 'toolName', type: String)], doc: 'Record trace of a Docker image run in a container')
    method(name: 'envVarsForTool', type: Object, namedParams: [parameter(name: 'toolId', type: String), parameter(name: 'toolVersion', type: String)], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step')
    method(name: 'getContext', type: Object, params: [type: Map], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
    method(name: 'withContext', type: Object, params: [context: Object, body: Closure], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
  }

  if (isArgumentFor(['agent'])) {
    method(name: 'getAny', type: Object, doc: 'jpgdsl@jpgdsl:agent.any')
    method(name: 'getNone', type: Object, doc: 'jpgdsl@jpgdsl:agent.none')
  }

  // The agent section
  if (isEnclosedBy(['agent'])) {
    method(name: 'getAny', type: String, doc: 'jpgdsl@jpgdsl:agent.any')
    method(name: 'getNone', type: String, doc: 'jpgdsl@jpgdsl:agent.none')
    method(name: 'node', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:agent.node')
    method(name: 'docker', type: String, params: [dockerImage: String])
    method(name: 'docker', type: Object, params: [body: Closure])
    method(name: 'dockerfile', type: Boolean, params: [useDockerfile: Boolean])
    method(name: 'kubernetes', type: Object, params: [body: Closure], doc: 'Kubernetes environment')
  }

  if (isEnclosedBy(['docker'])) {
    method(name: 'image', type: void, params: [name: String])
    method(name: 'label', type: void, params: [name: String])
    method(name: 'args', type: void, params: [value: String])
    method(name: 'alwaysPull', type: void)
    method(name: 'registryUrl', type: void, params: [url: String])
    method(name: 'registryCredentialsId', type: void, params: [id: String])
  }

  if (isEnclosedBy(['kubernetes'])) {
    method(name: 'defaultContainer', type: void, params: [label: String], doc: 'jpgdsl@jpgdsl:agent.kubernetes.defaultContainer')
    method(name: 'label', type: String, params: [agent_name: String])
    method(name: 'cloud', type: String, params: [cloud_name: String])
    method(name: 'yaml', type: String, params: [kubernetes_yaml_definition: String])
    method(name: 'yamlFile', type: String, params: [kubernetes_yaml_file: String])
  }

  if (isEnclosedBy(['agent', 'node'])) {
    method(name: 'label', type: String, params: [agentLabel: String], doc: 'jpgdsl@jpgdsl:agent.label')
  }

  if (isEnclosedBy(['node', 'docker', 'dockerfile'])) {
    method(name: 'customWorkspace', type: void, params: [path: String], doc: 'jpgdsl@jpgdsl:agent.node.customWorkspace')
  }

  if (isEnclosedBy(['docker', 'dockerfile'])) {
    method(name: 'reuseNode', type: void, params: [value: boolean], doc: 'jpgdsl@jpgdsl:agent.node.reuseNode')
  }

  // The options section
  if (isEnclosedBy(['options'])) {
    method(name: 'buildDiscarder', type: void, params: [logRotator: Object], doc: 'jpgdsl@jpgdsl:options.buildDiscarder')
    method(name: 'checkoutToSubdirectory', type: void, params: [subDir: String], doc: 'jpgdsl@jpgdsl:options.checkoutToSubdirectory')
    method(name: 'disableConcurrentBuilds', type: void, namedParams: [parameter(name: 'abortPrevious', type: Boolean)], doc: 'jpgdsl@jpgdsl:options.disableConcurrentBuilds')
    method(name: 'disableResume', type: void, doc: 'jpgdsl@jpgdsl:options.disableResume')
    method(name: 'newContainerPerStage', type: void, doc: 'jpgdsl@jpgdsl:options.newContainerPerStage')
    method(name: 'overrideIndexTriggers', type: void, params: [value: boolean], doc: 'jpgdsl@jpgdsl:options.overrideIndexTriggers')
    method(name: 'preserveStashes', type: void, namedParams: [parameter(name: 'buildCount', type: int)], doc: 'jpgdsl@jpgdsl:options.preserveStashes')
    method(name: 'quietPeriod', type: void, params: [value: int], doc: 'jpgdsl@jpgdsl:options.quietPeriod')
    method(name: 'retry', type: void, params: [value: int], doc: 'jpgdsl@jpgdsl:options.retry')
    method(name: 'skipDefaultCheckout', type: void, doc: 'jpgdsl@jpgdsl:options.skipDefaultCheckout')
    method(name: 'skipStagesAfterUnstable', type: void, doc: 'jpgdsl@jpgdsl:options.skipStagesAfterUnstable')
    method(name: 'timeout', type: void, namedParams: [parameter(name: 'time', type: Integer), parameter(name: 'unit', type: String)], doc: 'jpgdsl@jpgdsl:options.timeout')
    method(name: 'timestamps', type: void, doc: 'jpgdsl@jpgdsl:options.timestamps')
    method(name: 'parallelsAlwaysFailFast', type: void, doc: 'jpgdsl@jpgdsl:options.parallelsAlwaysFailFast')
  }

  if (isArgumentFor(['buildDiscarder'])) {
    method(name: 'logRotator', type: Object, namedParams: [parameter(name: 'numToKeepStr', type: String), parameter(name: 'artifactNumToKeepStr', type: String)], doc: 'jpgdsl@jpgdsl:options.logRotator')
  }

  if (isEnclosedBy(['environment'])) {
    method(name: 'credentials', type: String, params: [id: String], doc: 'jpgdsl@jpgdsl:environment.credentials')
  }

  // The Post section that controls post build activities
  if (isEnclosedBy(['post'])) {
    method(name: 'always', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.always')
    method(name: 'changed', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.changed')
    method(name: 'fixed', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.fixed')
    method(name: 'regression', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.regression')
    method(name: 'aborted', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.aborted')
    method(name: 'failure', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.failure')
    method(name: 'success', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.success')
    method(name: 'unstable', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.unstable')
    method(name: 'unsuccessful', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.unsuccessful')
    method(name: 'cleanup', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:post.cleanup')
  }

  if (isEnclosedBy(['parameters'])) {
    method(name: 'string', type: void, namedParams: [parameter(name: 'name', type: String), parameter(name: 'defaultValue', type: String), parameter(name: 'description', type: String)], doc: 'jpgdsl@jpgdsl:parameters.string')
    method(name: 'text', type: void, namedParams: [parameter(name: 'name', type: String), parameter(name: 'defaultValue', type: String), parameter(name: 'description', type: String)], doc: 'jpgdsl@jpgdsl:parameters.text')
    method(name: 'booleanParam', type: void, namedParams: [parameter(name: 'name', type: String), parameter(name: 'defaultValue', type: Boolean), parameter(name: 'description', type: String)], doc: 'jpgdsl@jpgdsl:parameters.booleanParam')
    method(name: 'choice', type: void, namedParams: [parameter(name: 'name', type: String), parameter(name: 'choices', type: ArrayList<String>), parameter(name: 'description', type: String)], doc: 'jpgdsl@jpgdsl:parameters.choice')
    method(name: 'password', type: void, namedParams: [parameter(name: 'name', type: String), parameter(name: 'defaultValue', type: Boolean), parameter(name: 'description', type: String)], doc: 'jpgdsl@jpgdsl:parameters.password')
  }

  if (isEnclosedBy(['triggers'])) {
    method(name: 'cron', type: void, params: [expr: String], doc: 'jpgdsl@jpgdsl:triggers.cron')
    method(name: 'pollSCM', type: void, params: [expr: String], doc: 'jpgdsl@jpgdsl:triggers.pollSCM')
    method(name: 'upstream', type: void, namedParams: [parameter(name: 'upstreamProjects', type: String), parameter(name: 'threshold', type: Object)], doc: 'jpgdsl@jpgdsl:parameters.upstream')
  }

  // Inside stages we can find "stage" or "stage('Name')"
  if (isEnclosedBy(['stages', 'parallel'])) {
    method(name: 'stage', type: void, params: [name: String, body: Closure], doc: 'jpgdsl@jpgdsl:stages.stage')
  }

  // Stage closure
  if (isEnclosedBy(['stage', 'matrix'])) {
    method(name: 'matrix', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:stage.matrix')
    method(name: 'input', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:stage.input')
    method(name: 'warnError', type: void, params: [name: String, body: Closure], doc: 'Ability to warn on a Stage Error')
    method(name: 'warnError', type: void, params: [body: Closure], doc: 'Ability to warn on a Stage Error')
    method(name: 'wrappers', type: void, params: [body: Closure], doc: 'Ability to apply a wrapper to a set of steps / functions')
    method(name: 'steps', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:stage.steps')
    method(name: 'parallel', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:stage.parallel')
    method(name: 'when', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:stage.when')
    method(name: 'failFast', type: void, params: [fail: boolean], doc: 'Set failFast true for all subsequent parallel steps in the stage')
  }

  // Tools closure
  // https://www.jenkins.io/doc/book/pipeline/syntax/#tools
  if (isEnclosedBy(['tools'])) {
    method(name: 'jdk', type: void, params: [tool: String], doc: 'jpgdsl@jpgdsl:tools.jdk')
    method(name: 'maven', type: void, params: [tool: String], doc: 'jpgdsl@jpgdsl:tools.maven')
    method(name: 'gradle', type: void, params: [tool: String], doc: 'jpgdsl@jpgdsl:tools.gradle')
  }

  // Input closure
  // https://www.jenkins.io/doc/book/pipeline/syntax/#input
  if (isEnclosedBy(['input'])) {
    method(name: 'message', type: void, params: [text: String], doc: 'jpgdsl@jpgdsl:input.message')
    method(name: 'id', type: void, params: [value: String], doc: 'jpgdsl@jpgdsl:input.id')
    method(name: 'ok', type: void, params: [text: String], doc: 'jpgdsl@jpgdsl:input.ok')
    method(name: 'submitter', type: void, params: [usersOrGroups: String], doc: 'jpgdsl@jpgdsl:input.submitter')
    method(name: 'submitterParameter', type: void, params: [envVar: String], doc: 'jpgdsl@jpgdsl:input.submitterParameter')
  }

  // When closure
  // https://www.jenkins.io/doc/book/pipeline/syntax/#when
  if (isEnclosedBy(['when'])) {
    method(name: 'beforeInput', type: void, params: [value: boolean], doc: 'jpgdsl@jpgdsl:when.beforeInput')
    method(name: 'beforeAgent', type: void, params: [value: boolean], doc: 'jpgdsl@jpgdsl:when.beforeAgent')
  }

  if (isEnclosedBy(['matrix'])) {
    method(name: 'axes', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:matrix.axes')
    method(name: 'excludes', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:matrix.excludes')
  }

  if (isEnclosedBy(['axes', 'exclude'])) {
    method(name: 'axis', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:matrix.axis')
  }

  if (isEnclosedBy(['axis'])) {
    method(name: 'name', type: void, params: [envVar: String], doc: 'jpgdsl@jpgdsl:matrix.axis.name')
    method(name: 'values', type: void, params: [labels: 'java.lang.String[]'], doc: 'jpgdsl@jpgdsl:matrix.axis.values')
    method(name: 'notValues', type: void, params: [labels: 'java.lang.String[]'], doc: 'jpgdsl@jpgdsl:matrix.axis.notValues')
  }

  if (isEnclosedBy(['excludes'])) {
    method(name: 'exclude', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:matrix.excludes.exclude')
  }

  if (isEnclosedBy(['when', 'expression', 'allOf', 'anyOf', 'not'])) {
    method(name: 'branch', type: boolean, params: [name: String], doc: 'jpgdsl@jpgdsl:when.branch')
    method(name: 'branch', type: boolean, namedParams: [parameter(name: 'pattern', type: String), parameter(name: 'comparator', type: String)], doc: 'jpgdsl@jpgdsl:when.branch')
    method(name: 'buildingTag', type: boolean, doc: 'jpgdsl@jpgdsl:when.buildingTag')
    method(name: 'changelog', type: boolean, params: [regexp: String], doc: 'jpgdsl@jpgdsl:when.changelog')
    method(name: 'changeset', type: boolean, params: [changeset: String], doc: 'jpgdsl@jpgdsl:when.changeset')
    method(name: 'changeset', type: boolean, namedParams: [parameter(name: 'pattern', type: String), parameter(name: 'comparator', type: String), parameter(name: 'caseSensitive', type: Boolean)], doc: 'jpgdsl@jpgdsl:when.changeset')
    method(name: 'changeRequest', type: boolean, doc: 'jpgdsl@jpgdsl:when.changeRequest')
    method(name: 'changeRequest', type: boolean, namedParams: [parameter(name: 'id', type: String), parameter(name: 'target', type: String), parameter(name: 'branch', type: String, doc: ''), parameter(name: 'fork', type: String), parameter(name: 'url', type: String), parameter(name: 'title', type: String), parameter(name: 'author', type: String), parameter(name: 'authorDisplayName', type: String), parameter(name: 'authorEmail', type: String), parameter(name: 'comparator', type: String)], doc: 'jpgdsl@jpgdsl:when.changeRequest')
    method(name: 'environment', type: boolean, namedParams: [parameter(name: 'name', type: String), parameter(name: 'value', type: String)], doc: 'jpgdsl@jpgdsl:when.environment')
    method(name: 'equals', type: boolean, namedParams: [parameter(name: 'expected', type: Object), parameter(name: 'actual', type: Object)], doc: 'jpgdsl@jpgdsl:when.equals')
    method(name: 'expression', type: boolean, params: [body: Closure], doc: 'jpgdsl@jpgdsl:when.expression')
    method(name: 'tag', type: boolean, params: [pattern: String], doc: 'jpgdsl@jpgdsl:when.tag')
    method(name: 'tag', type: boolean, namedParams: [parameter(name: 'pattern', type: String), parameter(name: 'comparator', type: String)], doc: 'jpgdsl@jpgdsl:when.tag')
    method(name: 'not', type: boolean, params: [body: Closure], doc: 'jpgdsl@jpgdsl:when.not')
    method(name: 'allOf', type: boolean, params: [body: Closure], doc: 'jpgdsl@jpgdsl:when.allOf')
    method(name: 'anyOf', type: boolean, params: [body: Closure], doc: 'jpgdsl@jpgdsl:when.anyOf')
    method(name: 'triggeredBy', type: boolean, params: [id: String], doc: 'jpgdsl@jpgdsl:when.triggeredBy')
    method(name: 'triggeredBy', type: boolean, namedParams: [parameter(name: 'cause', type: String), parameter(name: 'detail', type: String)], doc: 'jpgdsl@jpgdsl:when.triggeredBy')
  }

  if (isEnclosedBy([
      'steps',
      'script',
      'expression',
      'always',
      'changed',
      'fixed',
      'regression',
      'aborted',
      'failure',
      'success',
      'unstable',
      'unsuccessful',
      'cleanup',
  ])) {
    method(name: 'getParams', type: Map, doc: 'jpgdsl@jpgdsl:params')
    method(name: 'script', type: void, params: [body: Closure], doc: 'jpgdsl@jpgdsl:steps.script')
    method(name: 'echo', type: Object, params: [message: String], doc: 'jpgdsl@jpgdsl:steps.echo')
    method(name: 'bat', type: Object, params: [script: String], doc: 'Windows Batch Script')
    method(name: 'bat', type: Object, namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: Boolean), parameter(name: 'returnStdout', type: Boolean)], doc: 'Windows Batch Script')
    method(name: 'timestamp', type: Object, params: [body: Closure], doc: 'Timestamps')
    method(name: 'checkout', type: Object, params: [scm: Map], doc: 'General SCM')
    method(name: 'checkout', type: Object, namedParams: [parameter(name: 'scm', type: Map), parameter(name: 'changelog', type: Boolean), parameter(name: 'poll', type: Boolean)], doc: 'General SCM')
    method(name: 'cleanWs', doc: 'Clean workspace')
    method(name: 'deleteDir', type: Object, params: [:], doc: 'Recursively delete the current directory from the workspace')
    method(name: 'dir', type: Object, params: [path: String, body: Closure], doc: 'Change current directory')
    method(name: 'fileExists', type: Object, params: [file: String], doc: 'Verify if file exists in workspace')
    method(name: 'git', type: Object, params: [url: String], doc: 'Git')
    method(name: 'git', type: Object, namedParams: [parameter(name: 'url', type: String), parameter(name: 'branch', type: String), parameter(name: 'changelog', type: Boolean), parameter(name: 'credentialsId', type: String), parameter(name: 'poll', type: Boolean)], doc: 'Git')
    method(name: 'junit', type: Object, params: [testResults: String], doc: 'Archive JUnit-formatted test results')
    method(name: 'junit', type: Object, namedParams: [parameter(name: 'testResults', type: String), parameter(name: 'allowEmptyResults', type: Boolean), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: Boolean), parameter(name: 'testDataPublishers', type: Map)], doc: 'Archive JUnit-formatted test results')
    method(name: 'load', type: Object, params: [path: String], doc: 'Evaluate a Groovy source file into the Pipeline script')
    method(name: 'powershell', type: Object, params: [script: String], doc: 'PowerShell Script')
    method(name: 'powershell', type: Object, namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: Boolean), parameter(name: 'returnStdout', type: Boolean)], doc: 'PowerShell Script')
    method(name: 'publishHTML', type: Object, params: [target: Map], doc: 'Publish HTML reports')
    method(name: 'pwd', type: Object, params: [:], doc: 'Determine current directory')
    method(name: 'pwd', type: Object, namedParams: [parameter(name: 'tmp', type: Boolean)], doc: 'Determine current directory')
    method(name: 'readFile', type: Object, params: [file: String], doc: 'Read file from workspace')
    method(name: 'readFile', type: Object, namedParams: [parameter(name: 'file', type: String), parameter(name: 'encoding', type: String)], doc: 'Read file from workspace')
    method(name: 'sh', type: Object, params: [script: String], doc: 'Shell Script')
    method(name: 'sh', type: Object, namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: Boolean), parameter(name: 'returnStdout', type: Boolean)], doc: 'Shell Script')
    method(name: 'stash', type: Object, params: [name: String], doc: 'Stash some files to be used later in the build')
    method(name: 'stash', type: Object, namedParams: [parameter(name: 'name', type: String), parameter(name: 'allowEmpty', type: Boolean), parameter(name: 'excludes', type: String), parameter(name: 'includes', type: String), parameter(name: 'useDefaultExcludes', type: Boolean)], doc: 'Stash some files to be used later in the build')
    method(name: 'tm', type: Object, params: [stringWithMacro: String], doc: 'Expand a string containing macros')
    method(name: 'unstash', type: Object, params: [name: String], doc: 'Restore files previously stashed')
    method(name: 'validateDeclarativePipeline', type: Object, params: [path: String], doc: 'Validate a file containing a Declarative Pipeline')
    method(name: 'wrap', type: Object, params: [delegate: Map, body: Closure], doc: 'General Build Wrapper')
    method(name: 'writeFile', type: Object, namedParams: [parameter(name: 'file', type: String), parameter(name: 'text', type: String), parameter(name: 'encoding', type: String)], doc: 'Write file to workspace')
    method(name: 'archive', type: Object, params: [includes: String], doc: 'Advanced/Deprecated Archive artifacts')
    method(name: 'archive', type: Object, namedParams: [parameter(name: 'includes', type: String), parameter(name: 'excludes', type: String)], doc: 'Archive artifacts')
    method(name: 'dockerFingerprintFrom', type: Object, namedParams: [parameter(name: 'dockerfile', type: String), parameter(name: 'image', type: String), parameter(name: 'buildArgs', type: Map), parameter(name: 'toolName', type: String)], doc: 'Record trace of a Docker image used in FROM')
    method(name: 'unarchive', type: Object, params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
    method(name: 'unarchive', type: Object, namedParams: [parameter(name: 'mapping', type: Map)], doc: 'Copy archived artifacts into the workspace')
    method(name: 'withDockerContainer', type: Object, params: [image: String, body: Closure], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
    method(name: 'withDockerContainer', type: Object, params: [body: Closure], namedParams: [parameter(name: 'image', type: String), parameter(name: 'args', type: String), parameter(name: 'toolName', type: String)], doc: 'Run build steps inside a Docker container')
    method(name: 'withDockerRegistry', type: Object, params: [registry: Map, body: Closure], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
    method(name: 'withDockerServer', type: Object, params: [server: Map, body: Closure], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    method(name: 'aliyunOSSUpload', type: Object, doc: 'Upload files or directories to aliyun OSS', namedParams: [parameter(name: 'endpoint', type: String), parameter(name: 'accessKeyId', type: String), parameter(name: 'accessKeySecret', type: String), parameter(name: 'bucketName', type: String), parameter(name: 'localPath', type: String), parameter(name: 'remotePath', type: String), parameter(name: 'maxRetries', type: String)])
    method(name: 'archiveArtifacts', type: Object, namedParams: [parameter(name: 'artifacts', type: String, doc: 'Use comma separator to set a list of patterns'), parameter(name: 'excludes', type: String, doc: 'Use comma separator to set a list of patterns'), parameter(name: 'allowEmptyArchive', type: Boolean), parameter(name: 'caseSensitive', type: Boolean), parameter(name: 'defaultExcludes', type: Boolean), parameter(name: 'fingerprint', type: Boolean), parameter(name: 'followSymlinks', type: Boolean), parameter(name: 'onlyIfSuccessful', type: Boolean)])
    method(name: 'buildName', type: Object, params: [buildName: String], doc: 'Build name')
    method(name: 'buildDescription', type: Object, params: [buildDescription: String], doc: 'Build description')
    method(name: 'publishIssues', type: Object, params: [issues: List], doc: 'Publish issues created by a static analysis scan')
    method(name: 'publishIssues', type: Object, namedParams: [parameter(name: 'issues', type: 'java.util.List'), parameter(name: 'failOnError', type: 'boolean')])
    method(name: 'scanForIssues', type: 'Object', params: [:], doc: 'Scan files or the console log for warnings or issues')
    method(name: 'scanForIssues', type: 'Object', namedParams: [parameter(name: 'blameDisabled', type: 'boolean'), parameter(name: 'filters', type: 'java.util.List')])
  }
}
